import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, NgModule } from '@angular/core';
import * as SignaturePad from 'signature_pad/dist/signature_pad';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["canvas"];
function SignaturePadComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function SignaturePadComponent_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.emitPointsAndBlob(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r1.doneButtonClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.doneButtonText);
} }
function SignaturePadComponent_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function SignaturePadComponent_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clearPad(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r2.clearButtonClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.clearButtonText);
} }
class SignaturePadComponent {
    constructor() {
        this.points = [];
        this.pointsChange = new EventEmitter();
        this.editable = true;
        this.emitOnDragEnd = false;
        this.penColor = 'black';
        this.backgroundColor = 'transparent';
        this.showDoneButton = true;
        this.doneButtonText = 'Done';
        this.doneButtonClass = 'btn btn-primary';
        this.showClearButton = true;
        this.clearButtonText = 'Clear';
        this.clearButtonClass = 'btn btn-default';
        this.format = 'blob';
        this.height = 150;
        this.width = 600;
        this.done = new EventEmitter();
        this.cleared = new EventEmitter();
        this.responsive = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Resize Canvas to full screen:
        if (this.responsive) {
            window.addEventListener('resize', () => {
                this.resizeCanvas();
            });
            this.resizeCanvas();
        }
        this.initPad();
    }
    /**
     * @return {?}
     */
    initPad() {
        this.signaturePad = new SignaturePad(this.canvasRef.nativeElement, {
            penColor: this.penColor,
            backgroundColor: this.backgroundColor
        });
        this.signaturePad.penColor = this.penColor;
        if (this.editable) {
            this.signaturePad.on();
        }
        else {
            this.signaturePad.off();
        }
        this.signaturePad.onEnd = () => {
            this.emitPoints();
            if (this.emitOnDragEnd) {
                this.emitBlob();
            }
        };
        this.applyPoints();
        if (this.emitOnDragEnd) {
            this.emitBlob();
        }
    }
    /**
     * @return {?}
     */
    clearPad() {
        this.signaturePad.clear();
        this.cleared.emit();
        this.emitPoints();
        if (this.emitOnDragEnd) {
            this.emitBlob();
        }
    }
    /**
     * @return {?}
     */
    applyPoints() {
        if (!this.points || !this.signaturePad) {
            return;
        }
        this.signaturePad.clear();
        const /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
        const /** @type {?} */ points = JSON.parse(JSON.stringify(this.points));
        points.forEach(group => {
            group.points.forEach(pt => {
                pt.x = pt.x * multiplier;
                pt.y = pt.y * multiplier;
            });
        });
        this.signaturePad.fromData(points);
    }
    /**
     * @return {?}
     */
    emitPoints() {
        const /** @type {?} */ multiplier = this.canvasRef.nativeElement.offsetWidth / this.width;
        const /** @type {?} */ points = JSON.parse(JSON.stringify(this.signaturePad.toData()));
        points.forEach(group => {
            group.points.forEach(pt => {
                pt.x = pt.x / multiplier;
                pt.y = pt.y / multiplier;
            });
        });
        this.pointsChange.emit(points);
    }
    /**
     * @return {?}
     */
    emitPointsAndBlob() {
        this.emitPoints();
        this.emitBlob();
    }
    /**
     * @return {?}
     */
    emitBlob() {
        switch (this.format) {
            case 'base64':
                this.done.emit(this.signaturePad.toDataURL());
                break;
            case 'json':
                this.done.emit(this.signaturePad.toData());
                break;
            default:
                this.canvasRef.nativeElement.toBlob((blob) => {
                    this.done.emit(blob);
                });
                break;
        }
    }
    /**
     * @return {?}
     */
    resizeCanvas() {
        const /** @type {?} */ canvas = this.canvasRef.nativeElement;
        if (!canvas) {
            return;
        }
        const /** @type {?} */ pad = /** @type {?} */ (canvas.closest('.signature-pad'));
        if (!pad) {
            return;
        }
        const /** @type {?} */ w = pad.offsetWidth;
        const /** @type {?} */ h = pad.offsetWidth / (this.width / this.height);
        canvas.setAttribute('width', `${w}`);
        canvas.setAttribute('height', `${h}`);
        this.applyPoints();
    }
}
SignaturePadComponent.ɵfac = function SignaturePadComponent_Factory(t) { return new (t || SignaturePadComponent)(); };
SignaturePadComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SignaturePadComponent, selectors: [["ng-signature-pad"]], viewQuery: function SignaturePadComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);
    } }, inputs: { points: "points", editable: "editable", emitOnDragEnd: "emitOnDragEnd", penColor: "penColor", backgroundColor: "backgroundColor", showDoneButton: "showDoneButton", doneButtonText: "doneButtonText", doneButtonClass: "doneButtonClass", showClearButton: "showClearButton", clearButtonText: "clearButtonText", clearButtonClass: "clearButtonClass", format: "format", height: "height", width: "width", responsive: "responsive" }, outputs: { pointsChange: "pointsChange", done: "done", cleared: "cleared" }, decls: 6, vars: 4, consts: [[1, "signature-pad"], [3, "width", "height"], ["canvas", ""], [1, "buttons"], [3, "class", "click", 4, "ngIf"], [3, "click"]], template: function SignaturePadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "canvas", 1, 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, SignaturePadComponent_button_4_Template, 2, 3, "button", 4);
        ɵngcc0.ɵɵtemplate(5, SignaturePadComponent_button_5_Template, 2, 3, "button", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("width", ctx.width)("height", ctx.height);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showDoneButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showClearButton);
    } }, directives: [ɵngcc1.NgIf], styles: [".signature-pad[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{background:#f2f2f2}.signature-pad[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{margin-right:.25em}"] });
/** @nocollapse */
SignaturePadComponent.ctorParameters = () => [];
SignaturePadComponent.propDecorators = {
    "canvasRef": [{ type: ViewChild, args: ['canvas', { read: ElementRef },] },],
    "points": [{ type: Input },],
    "pointsChange": [{ type: Output },],
    "editable": [{ type: Input },],
    "emitOnDragEnd": [{ type: Input },],
    "penColor": [{ type: Input },],
    "backgroundColor": [{ type: Input },],
    "showDoneButton": [{ type: Input },],
    "doneButtonText": [{ type: Input },],
    "doneButtonClass": [{ type: Input },],
    "showClearButton": [{ type: Input },],
    "clearButtonText": [{ type: Input },],
    "clearButtonClass": [{ type: Input },],
    "format": [{ type: Input },],
    "height": [{ type: Input },],
    "width": [{ type: Input },],
    "done": [{ type: Output },],
    "cleared": [{ type: Output },],
    "responsive": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SignaturePadComponent, [{
        type: Component,
        args: [{
                selector: 'ng-signature-pad',
                template: `<div class="signature-pad">
    <canvas
        [width]="width"
        [height]="height"
        #canvas></canvas>
    <div class="buttons">
        <button [class]="doneButtonClass" *ngIf="showDoneButton" (click)="emitPointsAndBlob()">{{ doneButtonText }}</button>
        <button [class]="clearButtonClass" *ngIf="showClearButton" (click)="clearPad()">{{ clearButtonText }}</button>
    </div>
</div>
`,
                styles: [`.signature-pad canvas{background:#f2f2f2}.signature-pad .btn{margin-right:.25em}`]
            }]
    }], function () { return []; }, { points: [{
            type: Input
        }], pointsChange: [{
            type: Output
        }], editable: [{
            type: Input
        }], emitOnDragEnd: [{
            type: Input
        }], penColor: [{
            type: Input
        }], backgroundColor: [{
            type: Input
        }], showDoneButton: [{
            type: Input
        }], doneButtonText: [{
            type: Input
        }], doneButtonClass: [{
            type: Input
        }], showClearButton: [{
            type: Input
        }], clearButtonText: [{
            type: Input
        }], clearButtonClass: [{
            type: Input
        }], format: [{
            type: Input
        }], height: [{
            type: Input
        }], width: [{
            type: Input
        }], done: [{
            type: Output
        }], cleared: [{
            type: Output
        }], responsive: [{
            type: Input
        }], canvasRef: [{
            type: ViewChild,
            args: ['canvas', { read: ElementRef }]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SignaturePadModule {
}
SignaturePadModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SignaturePadModule });
SignaturePadModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SignaturePadModule_Factory(t) { return new (t || SignaturePadModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SignaturePadModule, { declarations: function () { return [SignaturePadComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SignaturePadComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SignaturePadModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [SignaturePadComponent],
                exports: [SignaturePadComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { SignaturePadComponent, SignaturePadModule };

//# sourceMappingURL=ng-plus-signature-pad.js.map